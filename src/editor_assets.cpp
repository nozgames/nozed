//
// Auto-generated asset manifest - DO NOT EDIT MANUALLY
// Generated by NoZ Game Engine Asset Importer
//

// @includes
#include <noz/noz.h>
#include "editor_assets.h"

// @assets
LoadedAssets g_assets = {};

LoadedNames g_names = {};

#ifdef NOZ_EDITOR

void HotloadAsset(const Name* incoming_name)
{
    // @fonts
    NOZ_RELOAD_FONT(g_assets.paths.fonts_seguisb, g_assets.fonts.seguisb);

    // @shaders
    NOZ_RELOAD_SHADER(g_assets.paths.shaders_lit, g_assets.shaders.lit);
    NOZ_RELOAD_SHADER(g_assets.paths.shaders_text, g_assets.shaders.text);
    NOZ_RELOAD_SHADER(g_assets.paths.shaders_ui, g_assets.shaders.ui);
    NOZ_RELOAD_SHADER(g_assets.paths.shaders_vfx, g_assets.shaders.vfx);

    // @stylesheets
    NOZ_RELOAD_STYLE_SHEET(g_assets.paths.ui_command_palette, g_assets.ui.command_palette);
    NOZ_RELOAD_STYLE_SHEET(g_assets.paths.ui_mesh_editor, g_assets.ui.mesh_editor);
    NOZ_RELOAD_STYLE_SHEET(g_assets.paths.ui_notifications, g_assets.ui.notifications);
    NOZ_RELOAD_STYLE_SHEET(g_assets.paths.ui_view, g_assets.ui.view);

    // @textures
    NOZ_RELOAD_TEXTURE(g_assets.paths.textures_palette, g_assets.textures.palette);

}
#endif // NOZ_EDITOR

// @init
bool LoadAssets(Allocator* allocator)
{
    g_assets.paths.fonts_seguisb = GetName("fonts/seguisb");
    g_assets.paths.shaders_lit = GetName("shaders/lit");
    g_assets.paths.shaders_text = GetName("shaders/text");
    g_assets.paths.shaders_ui = GetName("shaders/ui");
    g_assets.paths.shaders_vfx = GetName("shaders/vfx");
    g_assets.paths.textures_palette = GetName("textures/palette");
    g_assets.paths.ui_command_palette = GetName("ui/command_palette");
    g_assets.paths.ui_mesh_editor = GetName("ui/mesh_editor");
    g_assets.paths.ui_notifications = GetName("ui/notifications");
    g_assets.paths.ui_view = GetName("ui/view");
    g_names.asset_name_container = GetName("asset_name_container");
    g_names.asset_name = GetName("asset_name");
    g_names.command_palette = GetName("command_palette");
    g_names.command_input = GetName("command_input");
    g_names.command_colon = GetName("command_colon");
    g_names.command_text = GetName("command_text");
    g_names.command_text_cursor = GetName("command_text_cursor");
    g_names.command_text_preview = GetName("command_text_preview");
    g_names.color_picker_image = GetName("color_picker_image");
    g_names.notification_container = GetName("notification_container");
    g_names.notification = GetName("notification");
    g_names.notification_text = GetName("notification_text");
    g_names.r = GetName("r");
    g_names.rename = GetName("rename");
    g_names.save = GetName("save");
    g_names.e = GetName("e");
    g_names.edit = GetName("edit");
    g_names.n = GetName("n");
    g_names._new = GetName("new");
    g_names.s = GetName("s");
    g_names.mesh = GetName("mesh");
    g_names.skeleton = GetName("skeleton");


    NOZ_LOAD_FONT(allocator, g_assets.paths.fonts_seguisb, g_assets.fonts.seguisb);
    NOZ_LOAD_SHADER(allocator, g_assets.paths.shaders_lit, g_assets.shaders.lit);
    NOZ_LOAD_SHADER(allocator, g_assets.paths.shaders_text, g_assets.shaders.text);
    NOZ_LOAD_SHADER(allocator, g_assets.paths.shaders_ui, g_assets.shaders.ui);
    NOZ_LOAD_SHADER(allocator, g_assets.paths.shaders_vfx, g_assets.shaders.vfx);
    NOZ_LOAD_TEXTURE(allocator, g_assets.paths.textures_palette, g_assets.textures.palette);
    NOZ_LOAD_STYLE_SHEET(allocator, g_assets.paths.ui_command_palette, g_assets.ui.command_palette);
    NOZ_LOAD_STYLE_SHEET(allocator, g_assets.paths.ui_mesh_editor, g_assets.ui.mesh_editor);
    NOZ_LOAD_STYLE_SHEET(allocator, g_assets.paths.ui_notifications, g_assets.ui.notifications);
    NOZ_LOAD_STYLE_SHEET(allocator, g_assets.paths.ui_view, g_assets.ui.view);

    // Assign core engine assets
    g_core_assets.shaders.lit = g_assets.shaders.lit;
    g_core_assets.shaders.ui = g_assets.shaders.ui;
    g_core_assets.shaders.text = g_assets.shaders.text;
    g_core_assets.shaders.vfx = g_assets.shaders.vfx;
    g_core_assets.fonts.fallback = g_assets.fonts.seguisb;

    return true;
}

// @uninit
void UnloadAssets()
{
    // Clear all asset pointers
    memset(&g_assets, 0, sizeof(g_assets));
}
